<%- contentFor('body') %>

<div class="reset-bg">
  <div class="reset-card">
    <div class="reset-header">
      <h1>Reset Password</h1>
      <div id="successMessage" class="success-message"></div>
    </div>
    <form id="resetPasswordForm" class="reset-password-form">
      <div class="form-group">
        <label for="password">New Password</label>
        <div class="input-wrapper">
          <input type="text" id="password" name="password" required minlength="6" placeholder="Enter your new password">
        </div>
        <div class="password-requirements">
          <p>Password must be at least <b>6 characters</b>.</p>
        </div>
      </div>
      <div class="form-messages">
        <div id="errorMessage" class="error-message"></div>
      </div>
      <button type="submit" class="reset-button" id="resetButton">Reset Password</button>
    </form>
  </div>
</div>

<style>
.reset-bg {
  min-height: 80vh;
  background: linear-gradient(135deg, #e0e7ff 0%, #f8fafc 100%);
  display: flex;
  align-items: center;
  justify-content: center;
}
.reset-card {
  background: #fff;
  border-radius: 18px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.10);
  padding: 2.5rem 2rem 2rem 2rem;
  max-width: 400px;
  width: 100%;
  margin: 2rem 0;
  display: flex;
  flex-direction: column;
  align-items: center;
}
.reset-header {
  text-align: center;
}
.reset-header h1 {
  font-size: 2rem;
  font-weight: 700;
  color: #222;
  margin-bottom: 0.5rem;
}
.reset-password-form {
  width: 100%;
}
.form-group {
  margin-bottom: 1.3rem;
}
.form-group label {
  display: block;
  margin-bottom: 0.4rem;
  color: #333;
  font-weight: 500;
}
.form-group input {
  width: 100%;
  padding: 0.8rem 1rem;
  border: 1.5px solid #e5e7eb;
  border-radius: 8px;
  font-size: 1rem;
  background: #f9fafb;
  transition: border 0.2s;
}
.form-group input:focus {
  border: 1.5px solid #2563eb;
  outline: none;
  background: #fff;
}
.password-requirements {
  margin-top: 0.5rem;
  font-size: 0.97rem;
  color: #888;
}
.reset-button {
  width: 100%;
  padding: 1rem;
  background: linear-gradient(90deg, #2563eb 0%, #60a5fa 100%);
  color: #fff;
  border: none;
  border-radius: 8px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  margin-top: 0.5rem;
  box-shadow: 0 2px 8px rgba(37,99,235,0.08);
  transition: background 0.2s;
}
.reset-button:hover {
  background: linear-gradient(90deg, #1d4ed8 0%, #3b82f6 100%);
}
.reset-button:disabled {
  background: #cbd5e1;
  cursor: not-allowed;
}
.form-messages {
  margin: 0.7rem 0 0.2rem 0;
}
.error-message {
  color: #dc2626;
  margin-bottom: 0.5rem;
  display: none;
  font-size: 0.98rem;
  text-align: center;
}
.success-message {
  color: #16a34a;
  margin: 1rem 0;
  display: none;
  font-size: 1rem;
  text-align: center;
}
.input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}
.input-wrapper input {
  flex: 1;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
<script>
  const supabaseClient = supabase.createClient(
    'https://mjkaneaygdgbxojkqahb.supabase.co',
    'HIDDEN'
  );

  document.addEventListener('DOMContentLoaded', async function() {
    const form = document.getElementById('resetPasswordForm');
    const password = document.getElementById('password');
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');
    const resetButton = document.getElementById('resetButton');

    console.log('Page loaded, processing reset token...');

    try {
      const urlParams = new URLSearchParams(window.location.search);
      const tokenHash = urlParams.get('token_hash');
      const type = urlParams.get('type');

      if (!tokenHash || type !== 'recovery') {
        throw new Error('Invalid or missing reset token');
      }

      console.log('Valid reset token found, verifying session...');

      const { data, error: sessionError } = await supabaseClient.auth.verifyOtp({
        token_hash: tokenHash,
        type: 'recovery'
      });

      if (sessionError) {
        throw sessionError;
      }

      console.log('Session established successfully');

    } catch (error) {
      console.error('Session error:', error);
      errorMessage.textContent = 'Invalid or expired reset link. Please request a new password reset.';
      errorMessage.style.display = 'block';
      form.style.display = 'none';
      return;
    }

    function validatePassword() {
      if (password.value.length < 6) {
        errorMessage.textContent = 'Password must be at least 6 characters.';
        errorMessage.style.display = 'block';
        return false;
      }
      errorMessage.style.display = 'none';
      return true;
    }

    password.addEventListener('input', validatePassword);
    password.addEventListener('blur', validatePassword);

    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!validatePassword()) return;

      try {
        resetButton.disabled = true;
        resetButton.textContent = 'Resetting Password...';
        
        console.log('Updating password...');

        const { data, error: updateError } = await supabaseClient.auth.updateUser({
          password: password.value,
        });

        if (updateError) {
          throw updateError;
        }

        console.log('Password updated successfully');

        form.style.display = 'none';
        
        successMessage.innerHTML = `
          <div style="text-align: center; padding: 1rem;">
            <div style="font-size: 2.5rem; margin-bottom: 1rem;">âœ…</div>
            <h3 style="margin: 0 0 1rem 0; color: #16a34a; font-size: 1.2rem;">Password Reset Successful!</h3>
            <p style="margin: 0; font-size: 1rem; line-height: 1.5;">Your password has been updated successfully. You can now log in with your new password in the PlungePalz app.</p>
          </div>
        `;
        successMessage.style.display = 'block';
        successMessage.style.background = '#f0fdf4';
        successMessage.style.border = '2px solid #16a34a';
        successMessage.style.borderRadius = '8px';
        successMessage.style.padding = '1rem';
        errorMessage.style.display = 'none';

        setTimeout(async () => {
          await supabaseClient.auth.signOut();
        }, 3000);

      } catch (error) {
        console.error('Password update error:', error);
        errorMessage.textContent = error.message || 'An error occurred while resetting your password.';
        errorMessage.style.display = 'block';
        successMessage.style.display = '-none';
      } finally {
        resetButton.disabled = false;
        resetButton.textContent = 'Reset Password';
      }
    });
  });
</script>
